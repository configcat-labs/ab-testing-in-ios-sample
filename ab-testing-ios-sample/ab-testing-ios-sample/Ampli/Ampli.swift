/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull ios-sample-app'
 *
 * Required dependencies: Amplitude-iOS^8.10.0
 * Tracking Plan Version: 1
 * Build: 1.0.0
 * Runtime: ios:swift-ampli
 *
 * [View Tracking Plan](https://data.amplitude.com/codedbychavez/ab-testing-in-ios/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/codedbychavez/ab-testing-in-ios/implementation/ios-sample-app)
 */

import Foundation
import Amplitude

public typealias MiddlewareExtra = [String: Any]

public enum AmpliEnvironment: Int {
    case development, production;
}

let ApiKey: [AmpliEnvironment: String] = [
    .development: "",
    .production: "2550487ccf158fe7927ecde7d9207d5b"
];

let AmpliObservePlan = AMPPlan()
                      .setBranch("main")
                      .setSource("ios-sample-app")
                      .setVersion("1")
                      .setVersionId("31a8b7a0-9a54-4a44-b07f-36aee61f966e");

public class Event {
    public let eventType: String
    public let eventProperties: [String:Any]?
    public let options: EventOptions?;

    init(eventType: String, eventProperties: [String:Any?]?, options: EventOptions?) {
        self.eventType = eventType;
        self.eventProperties = eventProperties?.compactMapValues { $0 };
        self.options = options;
    }
}

public class GenericEvent<E> : Event {
    private let eventFactory: (_ eventProperties: [String: Any?]?, _ options: EventOptions?) -> E

    init(eventType: String, eventProperties: [String:Any?]?, options: EventOptions?, eventFactory: @escaping (_ eventProperties: [String: Any?]?, _ options: EventOptions?) -> E) {
        self.eventFactory = eventFactory;
        super.init(eventType: eventType, eventProperties: eventProperties, options: options)
    }

    public func options(_ options: EventOptions) -> E {
        return self.eventFactory(self.eventProperties, options);
    }

    public func options(deviceId: String? = nil, userId: String? = nil) -> E {
        return self.options(EventOptions(deviceId: deviceId, userId: userId));
    }
}

public class ProductTap : GenericEvent<ProductTap> {

    private init(_ eventProperties: [String: Any?]?, _ options: EventOptions? = nil) {
        super.init(
            eventType: "product_tap",
            eventProperties: eventProperties,
            options: options,
            eventFactory: ProductTap.init
        );
    }

    /**
    Owner: Chavez Harris
    */
    public convenience init() {
        self.init(nil);
    }
}

public struct LoadClientConfig {
    public let plan: AMPPlan?

    public init(plan: AMPPlan? = nil) {
        self.plan = plan
    }
}

public struct LoadClientOptions {
    public let apiKey: String?
    public let instance: Amplitude?
    public let config: LoadClientConfig?

    public init(apiKey: String? = nil, instance: Amplitude? = nil, config: LoadClientConfig? = nil) {
        self.apiKey = apiKey
        self.instance = instance
        self.config = config
    }
}

public struct LoadOptions {
    public let environment: AmpliEnvironment?
    public let disabled: Bool?
    public let client: LoadClientOptions?

    public init(environment: AmpliEnvironment? = nil, disabled: Bool? = nil, client: LoadClientOptions? = nil) {
        self.environment = environment
        self.disabled = disabled
        self.client = client
    }
}

public struct EventOptions {
    public let deviceId: String?
    public let userId: String?

    public init(deviceId: String? = nil, userId: String? = nil) {
        self.deviceId = deviceId;
        self.userId = userId;
    }
}

public class Ampli {
    private var amplitude: Amplitude?;
    public var client: Amplitude {
        get {
            _ = isInitializedAndEnabled();
            return amplitude!;
        }
    }

    public var isLoaded: Bool {
        get {
            return self.amplitude != nil;
        }
    }

    public private(set) var disabled: Bool;

    public static let instance: Ampli = Ampli()

    public init() {
        disabled = false;
    }

    public func load(_ options: LoadOptions? = nil) -> Void {
        self.disabled = options?.disabled ?? false;
        if (self.isLoaded) {
            NSLog("Warning: Ampli is already initialized. Ampli.instance.load() should be called once at application start up.");
            return;
        }
        let env = options?.environment ?? AmpliEnvironment.development;
        let apiKey = options?.client?.apiKey ?? ApiKey[env];

        if (options?.client?.instance != nil) {
            self.amplitude = options?.client?.instance;
        } else if (apiKey != nil) {
            self.amplitude = Amplitude.instance();
            self.amplitude?.initializeApiKey(apiKey!);
        } else {
            NSLog("ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
            return;
        }

        self.amplitude?.setPlan(options?.client?.config?.plan ?? AmpliObservePlan!);

        // set ingestionMetadata information
        let AmpliExtrasMiddleware = AMPBlockMiddleware { (payload, next) in
            let ingestionMetadata: NSMutableDictionary = [
                "source_name": "ios-swift-ampli",
                "source_version": "1.0.0"
            ];
            payload.event["ingestion_metadata"] = ingestionMetadata;
            // Continue to next middleware
            next(payload);
        }
        self.amplitude?.addEventMiddleware(AmpliExtrasMiddleware);
    }

    public func track(_ event: Event, options: EventOptions? = nil, extra: MiddlewareExtra? = nil) -> Void {
        if (!isInitializedAndEnabled()) {
            return;
        }
        self.handleEventOptions(event.options, options);
        amplitude?.logEvent(event.eventType, withEventProperties: event.eventProperties, withMiddlewareExtra: extra as? NSMutableDictionary);
    }

    public func identify(_ userId: String?, options: EventOptions? = nil, extra: MiddlewareExtra? = nil) -> Void {
        if (!isInitializedAndEnabled()) {
            return;
        }
        self.handleEventOptions(nil, options, userId)

        let identifyArgs = AMPIdentify()
        amplitude?.identify(identifyArgs)
    }

    public func setGroup(_ name: String, _ value: String, options: EventOptions? = nil, extra: MiddlewareExtra? = nil) -> Void {
        if (!isInitializedAndEnabled()) {
            return;
        }
        self.handleEventOptions(nil, options);
        amplitude?.setGroup(name, groupName: value as NSObject)
    }

    public func groupIdentify(_ groupType: String, _ groupName: String, options: EventOptions? = nil, extra: MiddlewareExtra? = nil) -> Void {
        if (!isInitializedAndEnabled()) {
            return;
        }
        self.handleEventOptions(nil, options)

        let identifyArgs = AMPIdentify()
        amplitude?.groupIdentify(withGroupType: groupType, groupName: groupName as NSObject, groupIdentify: identifyArgs)
    }

    public func flush() -> Void {
        if (!isInitializedAndEnabled()) {
            return;
        }
        amplitude?.uploadEvents();
    }

    /**
    product_tap

    [View in Tracking Plan](https://data.amplitude.com/codedbychavez/ab-testing-in-ios/events/main/latest/product_tap)

    Owner: Chavez Harris
    */
    public func productTap() {
        self.track(ProductTap());
    }
    private func isInitializedAndEnabled() -> Bool {
        if (!self.isLoaded) {
            NSLog("Ampli is not yet initialized. Have you called `ampli.load()` on app start?");
            return false;
        }
        return !self.disabled;
    }

    private func handleEventOptions(_ options: EventOptions?, _ overrideOptions: EventOptions?, _ overrideUserId: String? = nil) {
        let userId = overrideUserId ?? overrideOptions?.userId ?? options?.userId;
        if (userId != nil) {
            amplitude?.setUserId(userId);
        }

        let deviceId = overrideOptions?.deviceId ?? options?.deviceId;
        if (deviceId != nil) {
            amplitude?.setDeviceId(deviceId!);
        }
    }
}
